[tool.poetry]
name = "base_fastapi_fast_api"
version = "0.1.1"
description = "Эталонный базовый сервис"
authors = ["Andrey Sobolev <mail.asobolev@yandex.ru>"]

[tool.poetry.dependencies]
python = "^3.11"
asyncpg = "0.30.0"
fastapi = { extras = ["all"], version = "0.115.6" }
uvicorn = { extras = ["standard"], version = "0.32.0" }
sqlalchemy = "2.0.36"
alembic = "1.13.3"
orjson = "3.10.13"
loguru = "0.7.3"
pydantic-settings = "2.0.2"
aiofiles = "24.1.0"
types-aiofiles = "24.1.0.20241221"
PyJWT = "2.10.1"
python-dotenv = "1.0.1"
simple-print = "2.2.5"

[tool.poetry.dev-dependencies]
pytest = "8.3.4"
mypy = "1.4.1"
pre-commit = "4.0.1"
pytest-asyncio = "0.21.2"
pytest-alembic = "0.11.1"
pytest-cov = "4.1.0"
ruff = "0.8.4"
pytest-httpx = "0.34.0"
pytest-mock = "3.14.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
python_version = "3.11"
disable_error_code = ["import-untyped"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "handlers: marks tests as API handlers",
    "integration: marks tests as integration tests",
    "services: marks tests as service layer tests",
    "cli: marks tests as CLI command tests",
    "schemas: marks tests as schema validation tests",
]

[tool.virtualenvs]
in-project = true

[tool.ruff]
line-length = 100
target-version = "py311"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    ".venv",
    "env",
]

[tool.ruff.lint]
select = [
    "E", # PyCodeStyle errors
    "W", # PyCodeStyle warnings
    "I", # isort
    "N", # pep8-naming
    "F", # Pyflakes
    "UP", # pyupgrade
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "B", # flake8-bugbear
    "ASYNC", # flake8-asynс
    "G", # flake8-logging-forma
    "DTZ", # flake8-datetimez раскоментить после рефакторинг
    "D", # - докстринги - самый душный линтер
    "RUF", # Ruff-specific rules
    "ANN", # - neccecary type hints (undocument foo)
]
ignore = [
    "ANN001",
    "ANN201",
    "ANN206",
    "ANN204",
    "ANN002",
    "ANN003",
    "ANN401",
    "D100",
    "D101",
    "D104",
    "D105",
    "D106",
    "D107",
    "D202",
    "N805",
    "N806",
    "B008",
    "RUF001",
    "RUF002",
    "RUF003",
    "RUF012",
]
extend-select = [
    "B006", # mutable-argument-default
    "PIE794", # duplicate-class-field-definition
]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
force-wrap-aliases = true
force-single-line = true
combine-as-imports = false
lines-between-types = 1

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"migrations/*.py" = ["D", "E402", "E501", "ANN"]
"tests/*.py" = ["D", "DTZ", "E501", "ANN"]
"tests/conftest.py" = ["E402"]

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = false




