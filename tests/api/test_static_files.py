import pytest
from pathlib import Path


@pytest.mark.asyncio
class TestStaticFiles:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤."""

    async def test_static_files_exist(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
        static_dir = Path("apps/static")
        assert static_dir.exists(), "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è apps/static –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        index_file = static_dir / "index.html"
        assert index_file.exists(), "–§–∞–π–ª apps/static/index.html –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

    async def test_index_html_content(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ index.html."""
        index_file = Path("apps/static/index.html")
        
        with open(index_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        assert '<title>Nginx Log Analyzer - –î–∞—à–±–æ—Ä–¥</title>' in content
        assert 'üìä Nginx Log Analyzer' in content
        assert 'Chart.js' in content  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        assert 'loadDashboard()' in content  # –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints
        assert '/api/analytics/traffic' in content
        assert '/api/analytics/status-codes' in content
        assert '/api/analytics/top-ips' in content
        assert '/api/analytics/top-urls' in content
        assert '/api/analytics/errors' in content
        assert '/api/analytics/time-series' in content

    async def test_static_files_structure(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤."""
        static_dir = Path("apps/static")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        assert static_dir.is_dir()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ index.html - —ç—Ç–æ —Ñ–∞–π–ª
        index_file = static_dir / "index.html"
        assert index_file.is_file()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 1KB)
        assert index_file.stat().st_size > 1024

    async def test_html_validity(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å HTML."""
        index_file = Path("apps/static/index.html")
        
        with open(index_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ HTML —Ç–µ–≥–∏
        assert '<!DOCTYPE html>' in content
        assert '<html' in content
        assert '<head>' in content
        assert '<body>' in content
        assert '</html>' in content
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏ –∑–∞–∫—Ä—ã—Ç—ã
        assert content.count('<div') == content.count('</div>')
        assert content.count('<script') == content.count('</script>')
        assert content.count('<style') == content.count('</style>')

    async def test_css_styles(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ CSS —Å—Ç–∏–ª–µ–π."""
        index_file = Path("apps/static/index.html")
        
        with open(index_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CSS –∫–ª–∞—Å—Å–æ–≤
        css_classes = [
            'container',
            'header',
            'stats-grid',
            'stat-card',
            'chart-container',
            'table-container',
            'refresh-btn'
        ]
        
        for css_class in css_classes:
            assert f'class="{css_class}"' in content or f"class='{css_class}'" in content

    async def test_javascript_functions(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ JavaScript —Ñ—É–Ω–∫—Ü–∏–π."""
        index_file = Path("apps/static/index.html")
        
        with open(index_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        js_functions = [
            'initCharts',
            'loadDashboard',
            'formatBytes'
        ]
        
        for function in js_functions:
            assert f'function {function}' in content

    async def test_responsive_design(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞."""
        index_file = Path("apps/static/index.html")
        
        with open(index_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å–æ–≤
        assert '@media' in content
        assert 'max-width' in content
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ viewport meta —Ç–µ–≥–∞
        assert 'viewport' in content
        assert 'width=device-width' in content

    async def test_external_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏."""
        index_file = Path("apps/static/index.html")
        
        with open(index_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Chart.js
        assert 'cdn.jsdelivr.net/npm/chart.js' in content
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTTPS
        assert 'https://' in content 